#!/usr/bin/env python3

import sys
import socket
import os
import json
import subprocess
import os.path

from PyQt4 import QtGui

DEBUG = 2
WARNING = 1
INFO = 0

msg_level_names = ["INFO", "WARNING", "DEBUG"]
MSG_MAX_LEVEL = WARNING


def msg(level, *args):
    if level <= MSG_MAX_LEVEL:
        print(msg_level_names[level] + ":", " ".join(map(str, args)))


class RPC:
    def __init__(self, path):
        self.path = path
        self.socket = socket.socket(socket.AF_UNIX,
                                    socket.SOCK_STREAM)
        connected = False
        while not connected:
            try:
                self.socket.connect(self.path)
                connected = True
            except socket.error:
                pass
        self.file = self.socket.makefile("rw", 65536)

    def send_line(self, s):
        self.file.write(s + "\n")
        self.file.flush()

    def recv_line(self):
        return self.file.readline(1024)

    def send_cmd(self, *args):
        self.send_line(json.dumps({"command": args}))

    def recv_data(self):
        s = self.recv_line()
        if not s:
            return None
        return json.loads(s)

    def get_result(self):
        dat = {}
        while not ("error" in dat):
            dat = self.recv_data()
        return dat

    def command(self, *args):
        self.send_cmd(*args)
        dat = self.get_result()
        success = (dat["error"] == "success")
        return (success, dat["data"] if success else None)

    def set_prop(self, prop, value):
        self.send_cmd("set_property", prop, value)
        return self.get_result()["error"] == "success"

    def get_prop(self, prop):
        self.send_cmd("get_property", prop)
        dat = self.get_result()
        return dat["data"] if dat["error"] == "success" else None


class OPT:
    NORMAL = 0
    CHECK = 1
    SEP = 2
    SLIDER = 3

    def __init__(self, name=None, typ=NORMAL,
                 init=None, activate=None):
        self.name = name
        self.typ = typ
        self.init_ = init
        self.activate_ = activate

    def init(self):
        if self.init_:
            return self.init_()

    def activate(self):
        if self.activate_:
            return self.activate_()
        else:
            msg(DEBUG, "Option", self.name, "activated.")


SEP = OPT(typ=OPT.SEP)


class TOGGLE(OPT):
    def __init__(self, name, prop):
        OPT.__init__(self, name, OPT.CHECK)
        self.prop = prop

    def init(self):
        self.state = rpc.get_prop(self.prop)
        msg(DEBUG, "initial state for", self.prop, ":", self.state)

    def activate(self):
        rpc.set_prop(self.prop, not self.state)
        msg(DEBUG, "prop", self.prop, str(self.state),
            "->", str(not self.state))


class FILTER_TOGGLE(OPT):
    def __init__(self, name, filter_type, filter_name, filter_opts):
        OPT.__init__(self, name, OPT.CHECK)
        self.ft = "af" if filter_type[0] == "a" else "vf"
        self.filter_name = filter_name
        self.filter_opts = filter_opts

    def init(self):
        self.state = (self.filter_name in map(lambda x: x["name"],
                                              rpc.get_prop(self.ft)))

    def activate(self):
        # Note: af/vf toggle command might be removed/changed later.
        rpc.command(self.ft, "toggle", self.filter_name+"="+self.filter_opts)


class COMMAND(OPT):
    def __init__(self, name, *args):
        OPT.__init__(self, name, OPT.NORMAL)
        self.args = args

    def activate(self):
        rpc.command(*self.args)


class OPT_SET_PROP(OPT):
    def __init__(self, name, prop, value):
        OPT.__init__(self, name, OPT.NORMAL)
        self.prop = prop
        self.value = value

    def activate(self):
        rpc.set_prop(self.prop, self.value)


def get_track_info():
    info = {"video": [], "audio": [], "sub": []}
    for i in range(rpc.get_prop("track-list/count")):
        N = str(i)
        type_ = rpc.get_prop("track-list/" + N + "/type")
        track = {
            "id": rpc.get_prop("track-list/" + N + "/id"),
            "src-id": rpc.get_prop("track-list/" + N + "/src-id"),
            "title": rpc.get_prop("track-list/" + N + "/title"),
            "lang": rpc.get_prop("track-list/" + N + "/lang"),
            "default": rpc.get_prop("track-list/" + N + "/default"),
        }
        if rpc.get_prop("track-list/" + N + "/external"):
            track["filename"] = rpc.get_prop("track-list/" + N +
                                             "/external-filename")
        info[type_].append(track)
    return info


def to_abs_path(path):
    return os.path.normpath(os.path.join(work_dir, path))


def load_file_run_dialog(title):
    return QtGui.QFileDialog.getOpenFileName(None, title, work_dir)


def load_sub_file():
    filename = load_file_run_dialog("Choose a subtitle file")
    if filename:
        rpc.command("sub_add", filename)
        msg(DEBUG, "Subtitle file to load: ", filename)
    else:
        msg(DEBUG, "Subtitle file load dlg canceled.")


def load_file():
    filename = load_file_run_dialog("Choose a subtitle file")
    if filename:
        rpc.command("loadfile", filename)


def post_menu_action_factory(act):
    def func():
        global post_menu_action
        post_menu_action = act
    return func


def dl_subs():
    path = to_abs_path(rpc.get_prop("path"))
    try:
        subprocess.call(["subliminal", "download", "-s", "-l", "en", path])
        rpc.command("rescan_external_files")
        rpc.set_prop("sid", rpc.get_prop("sid") + 1)  # switch to the next sub
    except OSError:
        msg(WARNING, "Subliminal required",
        "Currently, this option requires subliminal to be installed.")


def about():
    QtGui.QMessageBox.about(None, "MPVMenu", "Popup menu for MPV")


class Layout:
    def __init__(self, *args):
        if len(args) > 1 and isinstance(args[0], str):
            self.name = args[0]
            args = args[1:]
        self.items = args


class TracklistLayout(Layout):
    TYPE_VIDEO = 0
    TYPE_AUDIO = 1
    TYPE_SUB = 2

    def __init__(self, name, typ):
        self.typ = typ
        self.name = name

    @property
    def items(self):
        typ = ("video", "audio", "sub")[self.typ]
        tracklist = get_track_info()[typ]
        return list(map(self.track_info_to_opt, tracklist))

    def track_info_to_opt(self, track):
        prop = ("vid", "aid", "sid")[self.typ]
        id_ = track["id"]
        title = " "+track["title"] if track["title"] else " Untitled"
        lang = " ("+track["lang"]+")" if track["lang"] else ""
        default = " (default)" if track["default"] else ""
        name = "{}{}{}{}".format(id_, title,
                                 lang, default)
        return OPT_SET_PROP(name, prop, track["id"])


layout = Layout(
    Layout(
        "File",
        OPT("Open file", activate=load_file),
        SEP,
        COMMAND("Quit mpv", "quit"),
        COMMAND("Quit mpv (watch later)", "quit_watch_later"),
        OPT("Quit mpvmenu", activate=exit)
    ),
    Layout(
        "Playback",
        TOGGLE("Pause", "pause"),
        Layout(
            "Rewind",
            COMMAND("3 seconds", "seek", "-3"),
            COMMAND("10 seconds", "seek", "-10"),
            COMMAND("1 minute", "seek", "-60")
        ),
        Layout(
            "Fast forward",
            COMMAND("3 seconds", "seek", "3"),
            COMMAND("10 seconds", "seek", "10"),
            COMMAND("1 minute", "seek", "60")
        ),
    ),
    Layout(
        "Playlist",
        COMMAND("Previous", "playlist_prev"),
        COMMAND("Next", "playlist_next")
    ),
    Layout(
        "Audio",
        TracklistLayout("Select audio track",
                        TracklistLayout.TYPE_AUDIO),
        TOGGLE("Mute", "mute"),
        Layout(
            "Audio Filters",
            FILTER_TOGGLE("Dynamic Range Compression",
                          "a", "drc", "2:1")
        )
    ),
    Layout(
        "Video",
        TracklistLayout("Select video track",
                        TracklistLayout.TYPE_VIDEO),
        TOGGLE("Fullscreen", "fullscreen")
    ),
    Layout(
        "Subtitles",
        TracklistLayout("Select subtitle track",
                        TracklistLayout.TYPE_SUB),
        TOGGLE("Enabled", "sub-visibility"),
        OPT("Load subtitles from file", activate=load_sub_file),
        OPT("Download subtitles",
            activate=post_menu_action_factory(dl_subs))
    ),
    SEP,
    Layout("Help", OPT("About", activate=about)),
)

class Menu(QtGui.QMenu):
    def __init__(self, layout):
        QtGui.QMenu.__init__(self)
        self.process_layout(layout)
        self.exec_(QtGui.QCursor.pos())

    def process_layout(self, layout, menu=None):
        if not menu:
            menu = self
        for item in layout.items:
            if isinstance(item, Layout):
                action = menu.addAction(item.name)
                submenu = QtGui.QMenu()
                action.setMenu(submenu)
                self.process_layout(item, submenu)
            else:
                if item.typ == OPT.SEP:
                    menu.addSeparator()
                else:
                    item.init()
                    action = menu.addAction(item.name)
                    if (item.typ == OPT.CHECK):
                        action.setCheckable(True)
                        action.setChecked(item.state)
                    action.triggered.connect(item.activate)

rpc = RPC("/tmp/mpv.sock")

work_dir = rpc.get_prop("working-directory")
if not work_dir:
    msg(WARNING, "can't get mpv's working directory,",
        "using current working dir of this script.")
    work_dir = os.getcwd()

post_menu_action = None

app = QtGui.QApplication(sys.argv)
app.setWindowIcon(QtGui.QIcon.fromTheme("mpv"))

menu = Menu(layout)

while True:
    dat = rpc.recv_data()
    if not dat:
        break
    # dispatch
    if "event" in dat:
        # event
        if dat["event"] == "client-message" and \
           dat["args"][0] == "popup_menu":
            menu = Menu(layout)
            if post_menu_action:
                post_menu_action()
                post_menu_action = None

sys.exit(0)
